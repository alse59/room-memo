package com.example.wataru.greendao.db;

import com.example.wataru.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PREVIEW_CONFIRM_DETAIL.
 */
public class PreviewConfirmDetail {

    private Long id;
    private String pcDetailName;
    private Long pcId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PreviewConfirmDetailDao myDao;

    private PreviewConfirm previewConfirm;
    private Long previewConfirm__resolvedKey;


    public PreviewConfirmDetail() {
    }

    public PreviewConfirmDetail(Long id) {
        this.id = id;
    }

    public PreviewConfirmDetail(Long id, String pcDetailName, Long pcId) {
        this.id = id;
        this.pcDetailName = pcDetailName;
        this.pcId = pcId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPreviewConfirmDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPcDetailName() {
        return pcDetailName;
    }

    public void setPcDetailName(String pcDetailName) {
        this.pcDetailName = pcDetailName;
    }

    public Long getPcId() {
        return pcId;
    }

    public void setPcId(Long pcId) {
        this.pcId = pcId;
    }

    /** To-one relationship, resolved on first access. */
    public PreviewConfirm getPreviewConfirm() {
        Long __key = this.pcId;
        if (previewConfirm__resolvedKey == null || !previewConfirm__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PreviewConfirmDao targetDao = daoSession.getPreviewConfirmDao();
            PreviewConfirm previewConfirmNew = targetDao.load(__key);
            synchronized (this) {
                previewConfirm = previewConfirmNew;
            	previewConfirm__resolvedKey = __key;
            }
        }
        return previewConfirm;
    }

    public void setPreviewConfirm(PreviewConfirm previewConfirm) {
        synchronized (this) {
            this.previewConfirm = previewConfirm;
            pcId = previewConfirm == null ? null : previewConfirm.getId();
            previewConfirm__resolvedKey = pcId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
