package com.example.wataru.greendao.db;

import com.example.wataru.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table OBJECT_IMAGE.
 */
public class ObjectImage {

    private Long id;
    private byte[] objectImage;
    private Integer sequenceNo;
    private Long objectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ObjectImageDao myDao;

    private Object object;
    private Long object__resolvedKey;


    public ObjectImage() {
    }

    public ObjectImage(Long id) {
        this.id = id;
    }

    public ObjectImage(Long id, byte[] objectImage, Integer sequenceNo, Long objectId) {
        this.id = id;
        this.objectImage = objectImage;
        this.sequenceNo = sequenceNo;
        this.objectId = objectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getObjectImageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public byte[] getObjectImage() {
        return objectImage;
    }

    public void setObjectImage(byte[] objectImage) {
        this.objectImage = objectImage;
    }

    public Integer getSequenceNo() {
        return sequenceNo;
    }

    public void setSequenceNo(Integer sequenceNo) {
        this.sequenceNo = sequenceNo;
    }

    public Long getObjectId() {
        return objectId;
    }

    public void setObjectId(Long objectId) {
        this.objectId = objectId;
    }

    /** To-one relationship, resolved on first access. */
    public Object getObject() {
        Long __key = this.objectId;
        if (object__resolvedKey == null || !object__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ObjectDao targetDao = daoSession.getObjectDao();
            Object objectNew = targetDao.load(__key);
            synchronized (this) {
                object = objectNew;
            	object__resolvedKey = __key;
            }
        }
        return object;
    }

    public void setObject(Object object) {
        synchronized (this) {
            this.object = object;
            objectId = object == null ? null : object.getId();
            object__resolvedKey = objectId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
